/*! application*/
//------ scripts/plugins/jquery.search-select.js
(function($) {

  console.log('inside search select.');

  $.fn.searchSelect = function(options) {
    // Some basic options
    var settings = $.extend({
      data: []
    }, options);

    this.each(function() {
      var self = $(this),
          placeholder = self.attr('placeholder');

      var $searchWrap = $('<div/>').addClass('search-select-wrap'),
          $activeItem = $('<div/>').addClass('active-item'),
          $selected   = $('<span/>').addClass('name').text(value()),
          $dropdown   = $('<div/>').addClass('search-dropdown'),
          $search     = $('<input/>').attr('type','search')
                                     .attr('placeholder', placeholder),
          $results    = $('<div/>').addClass('results')

      // Returns the value of the current selection
      function value() {
        return self.find('option:selected').text();
      }

      // Search through our data
      function search(q) {
        return _.filter(settings.data, function(item) {
          var _q = q.toLowerCase();

          return item.name.toLowerCase().search(_q) > -1;
        });
      }

      function resetResults() {
        $results.empty();

        // self.find('option').each(function() {
        //   var result = {
        //     value: $(this).val(),
        //     label: $(this).text(),
        //     name: $(this).text()
        //   }
        //
        //   addResult(result);
        // });
      }

      function addResult(result) {
        var $result = $('<span/>').addClass('result')
                                  .attr('data-value', result.value)
                                  .attr('data-label', result.label)
                                  .text(result.name);

        $results.append($result);
      }

      function openMenu() {
        $dropdown.addClass('active');
        $activeItem.addClass('opened');

        $search.focus();
      }

      function closeMenu() {
        $dropdown.removeClass('active');
        $activeItem.removeClass('opened');

        if ($search.val() == "") {
          resetResults();
        }
      }

      // Bind event handlers
      function bindHandlers() {
        // Click opens menu
        $activeItem.click(function() {
          if ($dropdown.hasClass('active')) {
            closeMenu();
          } else {
            openMenu();
          }
        });

        // Document click closes the menu
        $(document).click(function(event) {
          if (!$(event.target).closest('.search-select-wrap').length) {
            closeMenu();
          }
        });

        // Typing searches
        $search.on('keyup', function(e) {
          // clear the results
          $results.empty();

          if ($(this).val() == "") {
            resetResults();
          } else {
            var results = search($(this).val());

            _.each(results, function(result) {
              addResult(result)
            });
          }
        });

        // When a result is clicked, update the selection
        $dropdown.on('click', '.result', function() {
          self.val($(this).data('value')).change();
          $selected.text($(this).data('label'));

          $(this).closest('.bundle-item').removeClass('invalid');

          closeMenu();
        });
      }

      // Genreates markup
      function generate() {
        var $arrow = $('<span/>').addClass('icon-ui-bundle-dropdown');

        $activeItem.appendTo($searchWrap)
                   .append($selected)
                   .append($arrow);

        $dropdown.append($search).append($results);
        $searchWrap.append($activeItem).append($dropdown);

        // Append after select box
        self.before($searchWrap);

        bindHandlers();
      }

      generate();
    });
  }
})(jQuery);

//------ scripts/controllers/camera-finder.controller.js
(function($, CameraFinder) {

  console.log('in the camera finder controller.');

  $(function() {
    var ui = {
      help: $('.camera-finder-button').addClass('loaded'),
      finder: $('.camera-finder'),
      term: $('#camera-term'),
      results: $('.camera-results'),
      variant: $('#product-variant'),
      picker: $('#cable-picker')
    };
    
    // Don't do anything if there's not the right elements
    if (!ui.finder.length) {
      console.log('no camera finder!')
      return false;
    }

    if (!ui.picker.length) {
      ui.picker = ui.variant;
    }

    function search() {
      ui.results.empty();

      if (ui.term.val().trim()) {
        CameraFinder.search(ui.term.val().trim(), function(results) {
          if (results.length) {
            _.each(results, function(result) {
              var cable = result.gsx$cable.$t;
              $('<li/>').text(result.gsx$camera.$t).attr('data-cable', cable).appendTo(ui.results);
            });
          } else {
            $('<li/>').text("No results found").appendTo(ui.results);
          }
        });
      } else {
        $('<li/>').text(ui.results.attr('title')).appendTo(ui.results);
      }
    }

    function hideMenu() {
      ui.finder.removeClass('active');
      ui.picker.removeClass('hidden');
    }

    function showMenu() {
      ui.finder.addClass('active');
      ui.picker.addClass('hidden');
      ui.term.select();
    }

    search();

    ui.term.keyup(search);

    ui.help.click(function() {
      if (ui.finder.hasClass('active')) {
        hideMenu();
      } else {
        showMenu();
      }

    });

    ui.results.on('click', 'li', function() {
      var self = $(this);
      var cable = self.attr('data-cable');
      if (cable) {
        ui.picker.children().prop('selected', false).each(function() {
          if (cable.toLowerCase() == $(this).text().toLowerCase()) {
            $(this).prop('selected', true);
          }
        });

        hideMenu();
      }
    });

  });
})(jQuery, Colors.CameraFinder);

//------ scripts/views/camera-finder.model.js
Colors.CameraFinder = (function($) {
  var waiting = false;
  var data;

  console.log('in the camera finder model!')

  function parseData() {
    data = data.feed.entry;
  }

  function fetch(callback) {
    if (waiting) {
      return false;
    }

    waiting = true;
    var url = 'https://spreadsheets.google.com/feeds/list/1Z5YFLfZ_UkAWvJRY9mKZbNvegNbSTJ0F0CXqVdyhePw/od6/public/values?alt=json-in-script&callback=?';

    $.getJSON(url, function(response) {
      waiting = false;
      data = response;
      parseData();
      callback();
    });
  }

  function getData(callback) {
    if (!data) {
      fetch(function() {
        callback(data);
      });
    } else {
      return callback(data);
    }
  }

  function search(term, callback) {
    getData(function(data) {
      var results = _.filter(data, function(camera) {
        var PATTERN = new RegExp(term, 'i');
        if (camera.gsx$camera.$t.search(PATTERN) > -1) {
          return true;
        }
      });

      results = results ? results : false;

      callback(results);
    });
  }

  return {
    data: getData,
    search: search
  }
})(jQuery);

//------ scripts/views/customize.js
var customize = (function($) {
  $(document).ready(function() {
    if (Shopify.template.indexOf('customize') < 0) { console.log('returning'); return; }

    // Camera Finder
    function getVariantId(name, $select) {
      var $selection = $select.find('option').filter(function() {
        return $(this).text() == name;
      });

      return $selection.val();
    }

    Colors.CameraFinder.data(function(data) {
      $('.cable-select').each(function() {
        var $select = $(this);

        var mappedData = _.map(data, function(row) {
          var value = getVariantId(row.gsx$cable.$t, $select);

          return {
            value: value,
            name: row.gsx$camera.$t,
            label: row.gsx$cable.$t
          };
        });

        $(this).searchSelect({
          data: mappedData
        });
      });
    });

    // other
    var visual_top = $('#visual-container').css('top');

    var activate = function(element)  {
      if ( $(element).hasClass('variant') ) {
        $(element).siblings().removeClass('active');
      };

      $(element).addClass('active');
    }

    $( ".option" ).click(function() {
      console.log('an option was clicked.');
      activate(this);
    });

    $(document).on('scroll', function(){
      var $productWindow = $('#customize-container');
      var $visualContainer = $('#visual-container')

      var gutterHeight = $('#gutter').height();
      var gutterPosition = $("#gutter").offset().top;
      var gutterFull = gutterHeight + gutterPosition;

      var visualHeight = $visualContainer.outerHeight(true);
      var visualPosition = $("#visual-container").offset().top;
      var visualFull = visualHeight + visualPosition;

      var windowHeight = $(window).height();
      var scrollPosition = window.scrollY;

      // console.log(scrollPosition);
      // console.log($productWindow.outerHeight(true));

      var footerHeight = $('#customize-footer').height();

      // console.log($("#visual-container").$productWindow.outerHeight()-$("#visual-container").$viewPlaceholder.outerHeight())

      if (visualFull  > gutterFull - footerHeight ) {
        // console.log('it happned.');
        newHeight = gutterHeight - visualHeight - footerHeight;
        $('#visual-container').css('position', 'absolute');
        $('#visual-container').css('top', newHeight + 'px');
      } else {
        $('#visual-container').css('fixed', 'absolute');
        $('#visual-container').css('top', visual_top);
      }

      if (scrollPosition + windowHeight > gutterFull) {
        $("#customize-footer").addClass('attach');
      } else {
        $("#customize-footer").removeClass('attach');
      }
    });
  })
}(jQuery));

//------ scripts/views/products.js
var ajaxCart = (function($) {
  $(document).ready(function() {
    var product = Shopify.current_product;
      if (!product) { return; }
      if (Shopify.template.indexOf('custom') > 0) { return; }

    // Video Controls
    function playPause(block) {
      video = $(block).find('.flex-video')
      video_dom = $(block).find('.flex-video').get(0)
      video.css("display","block");
      block.find('.rhino-block-content').fadeOut( "slow", function() { });
      video_dom.play();
    }

    function playPauseInner(block) {
      video = $(block).find('.inner-video')
      video_dom = $(block).find('.inner-video').get(0)
      video_dom.play();
    }

    $('.play-button').click(function(event) {
      block = $(this).closest('.rhino-block');
      playPause(block);
    });

    $('.play-button-inner').click(function(event) {
      block = $(this).closest('.rhino-block');
      playPauseInner(block);
      $(this).css("display","none");
    })

    $('.flex-video').click(function(event) {
      this.pause();
      $(this).closest('.rhino-block').find('.rhino-block-content').fadeIn( "slow", function() { });
      video.css("display","none");
    });

    $('.inner-video').click(function(event) {
      this.pause();
      $(this).closest('.rhino-block').find('.play-button-inner').fadeIn( "slow", function() { });
    });

    // Scrolling Header
    $('.ph-title').click(function(event) {
      event.preventDefault();
      $("html, body").animate({ scrollTop: 0 }, "slow");
    });

    $('.ph-menu-item').click(function(event) {
      event.preventDefault();

      // What is the index of the item clicked?
      this_index = $('.ph-menu-item').index(this)

      // Colors duplicates the header, so ther are two copies of each .ph-menu-item.
      // To compensate, we must perform the following if statement.
      if (this_index >= ($('.ph-menu-item').length / 2) ) {
        menuLength = $('.ph-menu-item').length
        this_index = this_index - ( menuLength / 2);
      }

      target = $('.rhino-block')[this_index]

      $('html, body').animate({
          scrollTop: $(target).offset().top - 85
      }, 500);
    });

    var sections = $('.rhino-block');

    function find_break_points() {
      var elmOffsets = {};
      for (var i = 0, j = sections.length; i < j; ++i) {
        var offset = sections[i].offsetTop + sections[i].clientHeight;
        elmOffsets[offset] = sections[i];
      }
      return elmOffsets
    }

    var value;
    var elmOffsets = find_break_points();
    var sorted_keys = _.keys(elmOffsets).sort();
    var menuSections = $('.ph-menu-item');
    var menuLength = menuSections.length

    // Because the Colors Theme copies the menu, two rows of menuSections will be made.
    // Adding (length / 2) to the array index we target in the loop will make sure we target the second row.
    $(window).resize(function() {
      elmOffsets = find_break_points();
      sorted_keys = _.keys(elmOffsets).sort();
    });

    $(document).on('scroll', function(){
      // Increase to push break farther from top of element
      //110 delayed the switch when scrolling, 150 made it better
      pixels_above_element = 100;
      value = $(window).scrollTop();
      minOffset = _.keys(elmOffsets).reduceRight(function(prev,current){
      return value < current - pixels_above_element ? current : prev;
      });

      $('.ph-flex').find('.active').removeClass('active');

      // Find where to start the "make active" function
      if (value >= sorted_keys[0] - $(sections[0]).height() - 240   ) {
        $(menuSections[sorted_keys.indexOf(minOffset) + (menuLength / 2) ]).addClass("active");
      }
    });
  })
}(jQuery));
